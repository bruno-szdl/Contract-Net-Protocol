/* Client Class*/
agent Client {

	/* Modules*/
	module Console console;
	module System system;
	module Math math;
	module Prelude prelude;
	module Debug debug;
	module Df df;
	module Check check;
	
	/* Types*/
	types clientTypes {
		formula food(int, string);
		formula nOrders(int);
		formula restaurant_count(string, int);
		formula typesOfFood(int);
		formula location(int, int);
		formula wantToOrder(string, string);
		formula orderId(string);
		formula name(string);
		formula strategy(int);
		formula sendCFP(string, int, int);
		formula sendPropose(string, int, double);
		formula sendRefuse(string);
		formula placed(string);
		formula offer_denied(string, int);
		formula offer_accepted(string, int, int, int);
		formula preparing(string);
		formula being_prepared(string);
		formula proposal(string, string, int, double);
		formula refusal(string, string);
		formula notFound(string);
		formula placedAll(string);
		}

	/* Initial beliefs */
	initial nOrders(10); 
	initial typesOfFood(10);
	initial placed(0);
	initial notFound(0);
	
	// food(Id, Name)
	
	initial food(0, "pizza");
	initial food(1, "hamburger");
	initial food(2, "burrito");
	initial food(3, "pastel");
	initial food(4, "pasta");
	initial food(5, "sushi");
	initial food(6, "seafood");
	initial food(7, "hotdog");
	initial food(8, "salad");
	initial food(9, "sfiha");
	
	/* Initial goals */
	initial !init();
	initial !checkOrdersPlaced();

	
	rule +!init()
	: nOrders(int N) &
	typesOfFood(int T){
		string Name = system.name();
		+name(Name);
		console.println("Hi, I am " + Name);
		int X = 0;
		while(X < N){
			X = X + 1;
			int R = math.randomInt()%10;
			query(food(R, string F));
			string OrderId = Name + ".Order_" + X + "." + F;
			+orderId(OrderId);
			+wantToOrder(OrderId, F);
			console.println("I want to eat some " + F);
		}
		console.println("I have finished choosing food");
		-typesOfFood(T);
		while(food(int Y, string S)){
			-food(Y, S);
		}
		!getLocation();
		!getStrategy();
		system.sleep(1);
		!placeOrders();
	}

	rule +!getLocation(){
		int X = math.randomInt()%100;
		int Y = math.randomInt()%100;
		+location(X, Y);
	    console.println("I am located in ("+ X + ", "+ Y + ").");
		}
		
	rule +!getStrategy(){
		int S = math.randomInt()%2;
		+strategy(S);
		console.println("Strategy "+S);
		}

	rule +!placeOrders() 
		: location(int X, int Y){
			while(wantToOrder(string OrderId, string F)){
				-wantToOrder(OrderId, F);
				//console.println("Starting cnp for "+OrderId);
				!!cnp(OrderId, F, X, Y);
			}
		}

	rule +!cnp(string OrderId, string F, int X, int Y) {
			//system.sleep(math.randomInt()%100);
			!callForRestaurants(OrderId, F, X, Y);
		}

	rule +!callForRestaurants(string OrderId, string F, int X, int Y) {
			//console.println("Searching restaurants for "+OrderId);
			df.search(F, list LR);
			+restaurant_count(OrderId, list_count(LR));
			//console.println(LR);
			if (LR == ["register"]){
				//console.println("No resturant found for "+OrderId);
				//system.sleep(math.randomInt()%100);
				+notFound(OrderId);

			} else{
			send(cfp, LR, sendCFP(OrderId, X, Y));
			}
		}

	rule @message(propose, string sender, sendPropose(string OrderId, int Total, double S)) {
		+proposal(OrderId, sender, Total, S);
		//console.println("Received proposal for "+OrderId+" from "+sender);
		!call_done(OrderId);
	}

	rule @message(refuse, string sender, sendRefuse(string OrderId)) {
		+refusal(OrderId, sender);
		//console.println("Received refusal for "+OrderId+" from "+sender);
		!call_done(OrderId);
	}

	rule +!call_done(string OrderId) 
			:  restaurant_count(OrderId, check.count(proposal(OrderId, string sender, int Total, double S))+check.count(refusal(OrderId, string sender2))) {
		!chooseRestaurant(OrderId);
	}

	rule +!call_done(string OrderId) {}


	rule +!chooseRestaurant(string OrderId) {
		string chosen_restaurant = "";
		query(strategy(int St));
		query(location(int X, int Y));
		if (St == 0){
			int price = 9999;
			foreach(proposal(OrderId, string sender, int Total, double S)){
				if (Total < price) {
					if (chosen_restaurant ~= ""){
						send(reject-proposal, chosen_restaurant, offer_denied(OrderId, Total));
						}
					chosen_restaurant = sender;
					price = Total;
				} else {
					send(reject-proposal, sender, offer_denied(OrderId, Total));
				}
			}
		//system.sleep(math.randomInt()%100);
		send(accept-proposal, chosen_restaurant, offer_accepted(OrderId, price, X, Y));
		}else{
			int rate = -1;
			int price = 9999;
			foreach(proposal(OrderId, string sender, int Total, double S)){
				if (S > rate) {
					if (chosen_restaurant ~= ""){
						send(reject-proposal, chosen_restaurant, offer_denied(OrderId, Total));
						}
					chosen_restaurant = sender;
					rate = S;
					price = Total;
				} else {
					send(reject-proposal, sender, offer_denied(OrderId, Total));
				}
			}
		//console.println("Chosed "+ chosen_restaurant +" for "+OrderId);
		send(accept-proposal, chosen_restaurant, offer_accepted(OrderId, price, X, Y));
		}
		//console.println("Placed order for "+OrderId);
		//system.sleep(math.randomInt()%100);
		+placed(OrderId);

	}

	rule +!checkOrdersPlaced()
		: nOrders(int NO){
		int N = check.count(placed(string S1)) + check.count(notFound(string S2));
		if (N == NO){
			console.println("Placed all my orders!!!");
			send(inform, "main", placedAll("ok"));
		} else{
			//system.sleep(1);
			!checkOrdersPlaced();
		}
	}
	
}