/* Delivery Man Class*/
agent DeliveryMan {
	module System system;
	module Console console;
	module Debug debug;
	module Df df;
	module Strings strings;
	module Math math;
	module Prelude prelude;

	types deliverymanTypes{
		formula location(int, int);
		formula working(boolean);
		formula money(int);
		formula deliveries(int);
		formula thinking(boolean);
		formula sendCFP(string, int, int);
		formula sendProposeDelivery(string, int);
		formula sendRefuseDelivery(string);
		formula offer_deniedDelivery(string, int);
		formula offer_acceptedDelivery(string, int);
		formula	sendFailureDelivery(string);
		formula delivering(string);
		formula delivered(string);
		formula tell(string);
	}
	
	initial working(false);
	initial money(0);
	initial deliveries(0);

	initial !init();
	initial !getLocation();

	rule +!init(){
		console.println("Hi, I am a delivery man");
		df.register("deliveryman");
		}

	rule +!getLocation(){
		int X = math.randomInt()%100;
		int Y = math.randomInt()%100;
		+location(X, Y);
	    //console.println("I am located in ("+ X + ", "+ Y + ").");
		}

	rule @message(cfp, string sender, sendCFP(string OrderId, int X, int Y)) {
		//system.sleep(math.randomInt()%10);
		query(location(int XD, int YD));
		query(working(boolean w));
		if (w == true){
			//system.sleep(math.randomInt()%10);
			send(refuse, sender, sendRefuseDelivery(OrderId));
			//console.println("Not available now to "+OrderId);
		} else{
			int distance = math.abs(XD - X) + math.abs(YD -Y);
			//console.println("Proposing to "+OrderId);
			//system.sleep(math.randomInt()%10);
			send(propose, sender, sendProposeDelivery(OrderId, distance));}
		}

	rule @message(reject-proposal, string sender, offer_deniedDelivery(string OrderId, int distance)) {
		send(inform, sender, tell("ok"));
	}

	rule @message(accept-proposal, string sender, offer_acceptedDelivery(string OrderId, int distance)) {
		query(working(boolean w));
		if (w == true){
			send(failure, sender, sendFailureDelivery(OrderId));
		} else{
			-+working(true);
			query(deliveries(int S));
			-+deliveries(S+1);
			send(inform, sender, delivering(OrderId));
			//console.println("delivering " +OrderId);
			//system.sleep(1);
			list clientNameList = strings.split(OrderId, ";");
			string clientName = prelude.headAsString(clientNameList);
			//console.println(clientName);
			send(inform, clientName, delivered(OrderId));
			//console.println("Informimg client about the deliver " +OrderId);
			-+working(false);

		}
	}
}
