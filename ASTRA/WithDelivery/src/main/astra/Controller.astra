/* Client Class*/
agent Controller {

	/* Modules*/
	module Messaging messaging;
	module Console console;
	module System system;
	module Debug debug;
	module Check check;

	
	/* Types*/
	types controllerTypes {
		formula nClients(int);
		formula nRestaurants(int);
		formula nDeliveryMen(int);
		formula placedAll(string);
		formula nClientsPlaced(string);
		formula finishedAll(string);
		formula nClientsFinished(string);
		formula offer_deniedDelivery(string, int);
		formula offer_acceptedDelivery(string, int);
		}
	
		
	/* Initial beliefs */
	initial nClients(10); 																	
	initial nRestaurants(50); 																
    initial nDeliveryMen(10);
	initial nClientsPlaced(0);																
	initial nClientsFinished(0);																
	
	/* Initial goals */
	initial !iniciateServiceMsg();
	initial !createAgents();
	initial	!checkAllClientsPlaced();

	
	/* Plans */
	rule +!iniciateServiceMsg() {
	    messaging.installService("local", "astra.messaging.LocalMQService");
        messaging.startService("local");
		system.createAgent("register", "Register");
	}



	//creating deliverymen agents

	rule +!createAgents() :
		nDeliveryMen(int D) &
		nRestaurants(int R) &
		nClients(int C) {
			console.println(system.name());
			int X = 1;
			while (X <= D){
				system.createAgent("delivery_man_"+X, "DeliveryMan");
		    	console.println("Created delivery_man_"+X+" Agent");
		    	X = X + 1;
			}
			X = 1;
			while (X <= R){
				system.createAgent("restaurant_"+X, "Restaurant");
		    	console.println("Created restaurant_"+X+" Agent");
		    	X = X + 1;
			}
			system.sleep(100);
			X = 1;
			while (X <= C){
				system.createAgent("client_"+X, "Client");
		    	console.println("Created client_"+X+" Agent");
		    	X = X + 1;
		}
	}

	rule @message(inform, string sender, placedAll(string S)){
		console.println("---------------------- Received placed from " +sender);
		+nClientsPlaced(sender);
	}

	rule +!checkAllClientsPlaced()
		: nClients(int NC){
		int NCP = check.count(nClientsPlaced(string S));
		//debug.dumpBeliefs();
		console.println("NCP " + NCP);
		if (NC == NCP){
			console.println("---------------------- CNP 1 ------------------------");
			!checkAllClientsFinished();
		} else {
			system.sleep(1);
			!checkAllClientsPlaced();
		}
	}

	rule @message(inform, string sender, finishedAll(string S)){
		console.println("---------------------- Received finished from " +sender);
		+nClientsFinished(sender);
	}

	rule +!checkAllClientsFinished()
		: nClients(int NC){
		int NCF = check.count(nClientsFinished(string S));
		//debug.dumpBeliefs();
		//console.println("NCF " + NCF);
		if (NC == NCF){
			console.println("---------------------- CNP 2 ------------------------");
			system.exit();
		} else {
			system.sleep(1);
			!checkAllClientsFinished();
		}
	}

}
